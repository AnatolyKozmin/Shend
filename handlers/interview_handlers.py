from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
from db.engine import async_session_maker
from db.models import Interviewer, BotUser, TimeSlot
from utils.google_sheets import find_interviewer_by_code, get_schedules_data
from datetime import datetime


interview_router = Router()


class RegisterSobesStates(StatesGroup):
    waiting_code = State()
    waiting_confirmation = State()


@interview_router.message(Command('register_sobes'))
async def register_sobes_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ."""
    tg_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
    async with async_session_maker() as session:
        stmt = select(Interviewer).where(Interviewer.telegram_id == tg_id)
        result = await session.execute(stmt)
        existing = result.scalars().first()
        
        if existing:
            await message.answer(
                f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–π!\n\n"
                f"–§–ò–û: {existing.full_name}\n"
                f"ID: {existing.interviewer_sheet_id}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_interviews –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π."
            )
            return
    
    await state.set_state(RegisterSobesStates.waiting_code)
    await message.answer(
        "üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ (5 —Ü–∏—Ñ—Ä):"
    )


@interview_router.message(RegisterSobesStates.waiting_code)
async def register_sobes_code(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞."""
    code = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞
    if not code.isdigit() or len(code) != 5:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞.\n\n"
            "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 5 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    
    # –ò—â–µ–º –≤ Google Sheets
    try:
        interviewer_data = find_interviewer_by_code(code)
        
        if not interviewer_data:
            await message.answer(
                "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
        await state.update_data(
            full_name=interviewer_data['full_name'],
            access_code=interviewer_data['access_code'],
            interviewer_sheet_id=interviewer_data['interviewer_sheet_id']
        )
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        kb = InlineKeyboardBuilder()
        kb.row(
            InlineKeyboardButton(text="‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_interviewer:yes"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, —ç—Ç–æ –Ω–µ —è", callback_data="confirm_interviewer:no")
        )
        
        await state.set_state(RegisterSobesStates.waiting_confirmation)
        await message.answer(
            f"üîç –ù–∞–π–¥–µ–Ω–æ!\n\n"
            f"–§–ò–û: {interviewer_data['full_name']}\n"
            f"ID: {interviewer_data['interviewer_sheet_id']}\n\n"
            f"–≠—Ç–æ –≤—ã?",
            reply_markup=kb.as_markup()
        )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await state.clear()


@interview_router.callback_query(F.data.startswith('confirm_interviewer:'))
async def confirm_interviewer(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    _, answer = callback.data.split(':', 1)
    
    if answer == 'no':
        await callback.message.edit_text(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register_sobes —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞."
        )
        await state.clear()
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    full_name = data.get('full_name')
    access_code = data.get('access_code')
    interviewer_sheet_id = data.get('interviewer_sheet_id')
    
    tg_user = callback.from_user
    tg_id = tg_user.id
    username = tg_user.username
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with async_session_maker() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â—ë —Ä–∞–∑, –≤–¥—Ä—É–≥ —É–∂–µ –µ—Å—Ç—å
            stmt = select(Interviewer).where(Interviewer.telegram_id == tg_id)
            result = await session.execute(stmt)
            existing = result.scalars().first()
            
            if existing:
                await callback.message.edit_text(
                    "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                    f"–§–ò–û: {existing.full_name}"
                )
                await state.clear()
                await callback.answer()
                return
            
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ
            interviewer = Interviewer(
                full_name=full_name,
                telegram_id=tg_id,
                telegram_username=username.lower() if username else None,
                interviewer_sheet_id=interviewer_sheet_id,
                access_code=access_code,
                is_active=True
            )
            
            session.add(interviewer)
            await session.commit()
            
            await callback.message.edit_text(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–§–ò–û: {full_name}\n"
                f"ID: {interviewer_sheet_id}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ /my_interviews - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏\n\n"
                "–ê–¥–º–∏–Ω —Å–º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤–∞–º —Å–ª–æ—Ç—ã –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π."
            )
            
            await state.clear()
            await callback.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ: {e}")
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await state.clear()
            await callback.answer()


@interview_router.message(Command('cancel'))
async def cancel_registration(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")
        return
    
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@interview_router.message(Command('sync_slots'))
async def sync_slots(message: types.Message):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤ –∏–∑ Google Sheets (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    ADMIN_ID = 922109605  # TODO: –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥
    
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–ª–æ—Ç–æ–≤ –∏–∑ Google Sheets...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
        slots_data = get_schedules_data()
        
        if not slots_data:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
            return
        
        async with async_session_maker() as session:
            added = 0
            updated = 0
            skipped = 0
            errors = 0
            
            for slot_info in slots_data:
                try:
                    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ –ø–æ interviewer_sheet_id
                    interviewer_stmt = select(Interviewer).where(
                        Interviewer.interviewer_sheet_id == slot_info['interviewer_sheet_id']
                    )
                    interviewer_result = await session.execute(interviewer_stmt)
                    interviewer = interviewer_result.scalars().first()
                    
                    if not interviewer:
                        # –°–æ–±–µ—Å–µ–¥—É—é—â–∏–π –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        skipped += 1
                        continue
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ
                    faculties_str = ",".join(slot_info['faculties'])
                    if interviewer.faculties != faculties_str:
                        interviewer.faculties = faculties_str
                        session.add(interviewer)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–ª–æ—Ç
                    existing_slot_stmt = select(TimeSlot).where(
                        TimeSlot.interviewer_id == interviewer.id,
                        TimeSlot.date == slot_info['date'],
                        TimeSlot.time_start == slot_info['time_start']
                    )
                    existing_slot_result = await session.execute(existing_slot_stmt)
                    existing_slot = existing_slot_result.scalars().first()
                    
                    if existing_slot:
                        # –°–ª–æ—Ç —É–∂–µ –µ—Å—Ç—å - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —Å–≤–æ–±–æ–¥–µ–Ω
                        if existing_slot.is_available:
                            existing_slot.time_end = slot_info['time_end']
                            existing_slot.google_sheet_sync = datetime.now()
                            session.add(existing_slot)
                            updated += 1
                        else:
                            # –°–ª–æ—Ç –∑–∞–Ω—è—Ç - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
                            skipped += 1
                    else:
                        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ª–æ—Ç
                        new_slot = TimeSlot(
                            interviewer_id=interviewer.id,
                            date=slot_info['date'],
                            time_start=slot_info['time_start'],
                            time_end=slot_info['time_end'],
                            is_available=True,
                            google_sheet_sync=datetime.now()
                        )
                        session.add(new_slot)
                        added += 1
                
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ—Ç–∞: {e}")
                    errors += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()
            
            await message.answer(
                f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤: {added}\n"
                f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {updated}\n"
                f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–∑–∞–Ω—è—Ç–æ –∏–ª–∏ –Ω–µ—Ç —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ): {skipped}\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫: {errors}\n\n"
                f"üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(slots_data)} —Å–ª–æ—Ç–æ–≤ –∏–∑ Google Sheets"
            )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:\n{str(e)}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ Google Sheets –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å credentials."
        )

