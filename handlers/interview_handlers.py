from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy import select, and_, or_
from db.engine import async_session_maker
from db.models import Interviewer, BotUser, TimeSlot, Interview, Person, InterviewMessage
from utils.google_sheets import find_interviewer_by_code, get_schedules_data
from datetime import datetime
import random


interview_router = Router()


class RegisterSobesStates(StatesGroup):
    waiting_code = State()
    waiting_confirmation = State()


class BookingSobesStates(StatesGroup):
    waiting_date = State()
    waiting_time = State()
    waiting_confirmation = State()


class QuestionStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤."""
    waiting_question = State()  # –ö–∞–Ω–¥–∏–¥–∞—Ç –≤–≤–æ–¥–∏—Ç –≤–æ–ø—Ä–æ—Å
    waiting_answer = State()    # –°–æ–±–µ—Å–µ–¥—É—é—â–∏–π –≤–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç


@interview_router.message(Command('register_sobes'))
async def register_sobes_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ."""
    tg_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
    async with async_session_maker() as session:
        stmt = select(Interviewer).where(Interviewer.telegram_id == tg_id)
        result = await session.execute(stmt)
        existing = result.scalars().first()
        
        if existing:
            await message.answer(
                f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–π!\n\n"
                f"–§–ò–û: {existing.full_name}\n"
                f"ID: {existing.interviewer_sheet_id}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_interviews –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π."
            )
            return
    
    await state.set_state(RegisterSobesStates.waiting_code)
    await message.answer(
        "üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ (5 —Å–∏–º–≤–æ–ª–æ–≤):"
    )


@interview_router.message(RegisterSobesStates.waiting_code)
async def register_sobes_code(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞."""
    code = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π
    if not code:
        await message.answer(
            "‚ùå –ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–æ–¥–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ 5 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(code) != 5:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞.\n\n"
            "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    
    # –ò—â–µ–º –≤ Google Sheets
    try:
        interviewer_data = find_interviewer_by_code(code)
        
        if not interviewer_data:
            await message.answer(
                "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
        await state.update_data(
            full_name=interviewer_data['full_name'],
            access_code=interviewer_data['access_code'],
            interviewer_sheet_id=interviewer_data['interviewer_sheet_id']
        )
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        kb = InlineKeyboardBuilder()
        kb.row(
            InlineKeyboardButton(text="‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_interviewer:yes"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, —ç—Ç–æ –Ω–µ —è", callback_data="confirm_interviewer:no")
        )
        
        await state.set_state(RegisterSobesStates.waiting_confirmation)
        await message.answer(
            f"üîç –ù–∞–π–¥–µ–Ω–æ!\n\n"
            f"–§–ò–û: {interviewer_data['full_name']}\n"
            f"ID: {interviewer_data['interviewer_sheet_id']}\n\n"
            f"–≠—Ç–æ –≤—ã?",
            reply_markup=kb.as_markup()
        )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await state.clear()


@interview_router.callback_query(F.data.startswith('confirm_interviewer:'))
async def confirm_interviewer(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    _, answer = callback.data.split(':', 1)
    
    if answer == 'no':
        await callback.message.edit_text(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register_sobes —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞."
        )
        await state.clear()
        try:
            await callback.answer()
        except TelegramBadRequest:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "query too old"
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    full_name = data.get('full_name')
    access_code = data.get('access_code')
    interviewer_sheet_id = data.get('interviewer_sheet_id')
    
    tg_user = callback.from_user
    tg_id = tg_user.id
    username = tg_user.username
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with async_session_maker() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â—ë —Ä–∞–∑, –≤–¥—Ä—É–≥ —É–∂–µ –µ—Å—Ç—å
            stmt = select(Interviewer).where(Interviewer.telegram_id == tg_id)
            result = await session.execute(stmt)
            existing = result.scalars().first()
            
            if existing:
                await callback.message.edit_text(
                    "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                    f"–§–ò–û: {existing.full_name}"
                )
                await state.clear()
                try:
                    await callback.answer()
                except TelegramBadRequest:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "query too old"
                return
            
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ
            interviewer = Interviewer(
                full_name=full_name,
                telegram_id=tg_id,
                telegram_username=username.lower() if username else None,
                interviewer_sheet_id=interviewer_sheet_id,
                access_code=access_code,
                is_active=True
            )
            
            session.add(interviewer)
            await session.commit()
            
            await callback.message.edit_text(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–§–ò–û: {full_name}\n"
                f"ID: {interviewer_sheet_id}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ /my_interviews - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏\n\n"
                "–ê–¥–º–∏–Ω —Å–º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤–∞–º —Å–ª–æ—Ç—ã –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π."
            )
            
            await state.clear()
            try:
                await callback.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            except TelegramBadRequest:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "query too old"
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ: {e}")
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await state.clear()
            try:
                await callback.answer()
            except TelegramBadRequest:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "query too old"


@interview_router.message(Command('cancel'))
async def cancel_registration(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")
        return
    
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@interview_router.message(Command('sync_slots'))
async def sync_slots(message: types.Message):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤ –∏–∑ Google Sheets (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    ADMIN_ID = 922109605  # TODO: –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥
    
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–ª–æ—Ç–æ–≤ –∏–∑ Google Sheets...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
        slots_data, interviewer_stats = get_schedules_data()
        
        if not slots_data:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
            return
        
        async with async_session_maker() as session:
            added = 0
            updated = 0
            skipped = 0
            errors = 0
            
            for slot_info in slots_data:
                try:
                    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ –ø–æ interviewer_sheet_id
                    interviewer_stmt = select(Interviewer).where(
                        Interviewer.interviewer_sheet_id == slot_info['interviewer_sheet_id']
                    )
                    interviewer_result = await session.execute(interviewer_stmt)
                    interviewer = interviewer_result.scalars().first()
                    
                    if not interviewer:
                        # –°–æ–±–µ—Å–µ–¥—É—é—â–∏–π –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        skipped += 1
                        continue
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ (–¥–æ–±–∞–≤–ª—è–µ–º, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º)
                    new_faculties = slot_info['faculties']
                    
                    if interviewer.faculties:
                        # –ï—Å—Ç—å —É–∂–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
                        existing = set(interviewer.faculties.split(','))
                        existing.update(new_faculties)
                        interviewer.faculties = ','.join(sorted(existing))
                    else:
                        # –ù–µ—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ - –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
                        interviewer.faculties = ','.join(sorted(new_faculties))
                    
                    session.add(interviewer)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–ª–æ—Ç
                    existing_slot_stmt = select(TimeSlot).where(
                        TimeSlot.interviewer_id == interviewer.id,
                        TimeSlot.date == slot_info['date'],
                        TimeSlot.time_start == slot_info['time_start']
                    )
                    existing_slot_result = await session.execute(existing_slot_stmt)
                    existing_slot = existing_slot_result.scalars().first()
                    
                    if existing_slot:
                        # –°–ª–æ—Ç —É–∂–µ –µ—Å—Ç—å - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —Å–≤–æ–±–æ–¥–µ–Ω
                        if existing_slot.is_available:
                            existing_slot.time_end = slot_info['time_end']
                            existing_slot.google_sheet_sync = datetime.now()
                            session.add(existing_slot)
                            updated += 1
                        else:
                            # –°–ª–æ—Ç –∑–∞–Ω—è—Ç - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
                            skipped += 1
                    else:
                        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ª–æ—Ç
                        new_slot = TimeSlot(
                            interviewer_id=interviewer.id,
                            date=slot_info['date'],
                            time_start=slot_info['time_start'],
                            time_end=slot_info['time_end'],
                            is_available=True,
                            google_sheet_sync=datetime.now()
                        )
                        session.add(new_slot)
                        added += 1
                
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ—Ç–∞: {e}")
                    errors += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_message = (
                f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤: {added}\n"
                f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {updated}\n"
                f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–∑–∞–Ω—è—Ç–æ –∏–ª–∏ –Ω–µ—Ç —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ): {skipped}\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫: {errors}\n\n"
                f"üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(slots_data)} —Å–ª–æ—Ç–æ–≤ –∏–∑ Google Sheets\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–º
            if interviewer_stats:
                stats_message += f"\nüë• –°–ª–æ—Ç—ã –ø–æ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–º:\n"
                for interviewer_name, count in sorted(interviewer_stats.items()):
                    stats_message += f"‚Ä¢ {interviewer_name}: {count} —Å–ª–æ—Ç–æ–≤\n"
            
            await message.answer(stats_message)
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:\n{str(e)}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ Google Sheets –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å credentials."
        )


@interview_router.message(Command('sobes'))
async def sobes_start(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ."""
    tg_id = message.from_user.id
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º BotUser
        stmt = select(BotUser).where(BotUser.tg_id == tg_id)
        result = await session.execute(stmt)
        bot_user = result.scalars().first()
        
        if not bot_user:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
        existing_stmt = select(Interview).where(
            Interview.bot_user_id == bot_user.id,
            Interview.status.in_(['confirmed', 'pending'])
        )
        existing_result = await session.execute(existing_stmt)
        existing_interview = existing_result.scalars().first()
        
        if existing_interview:
            slot_stmt = select(TimeSlot).where(TimeSlot.id == existing_interview.time_slot_id)
            slot_result = await session.execute(slot_stmt)
            slot = slot_result.scalars().first()
            
            kb = InlineKeyboardBuilder()
            kb.row(InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–º—É", callback_data=f"ask_question:{existing_interview.id}"))
            
            await message.answer(
                f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!\n\n"
                f"üìÖ –î–∞—Ç–∞: {slot.date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {slot.time_start} - {slot.time_end}\n"
                f"üéì –§–∞–∫—É–ª—å—Ç–µ—Ç: {existing_interview.faculty}\n\n"
                f"‚ùóÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.\n"
                f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=kb.as_markup()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º Person –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
        person = None
        if bot_user.person_id:
            person_stmt = select(Person).where(Person.id == bot_user.person_id)
            person_result = await session.execute(person_stmt)
            person = person_result.scalars().first()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        user_faculty = None
        if person and person.faculty:
            user_faculty = person.faculty.strip()
        
        if not user_faculty:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
            faculties = ["–°–ù–∏–ú–ö", "–ú–≠–û", "–§–≠–ë", "–Æ—Ä—Ñ–∞–∫", "–ò–¢–∏–ê–ë–î", "–§–∏–Ω–§–∞–∫", "–ù–ê–ë", "–í–®–£"]
            
            kb = InlineKeyboardBuilder()
            for fac in faculties:
                kb.row(InlineKeyboardButton(text=fac, callback_data=f"select_faculty:{fac}"))
            
            await message.answer(
                "üéì –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:",
                reply_markup=kb.as_markup()
            )
            await state.set_state(BookingSobesStates.waiting_date)
            return
        
        # –§–∞–∫—É–ª—å—Ç–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
        await show_available_times(message, session, user_faculty, state)


async def show_available_times(message: types.Message, session, user_faculty: str, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ (–¥–∞—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É)."""
    # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    stmt = select(TimeSlot).join(Interviewer).where(
        TimeSlot.is_available == True,
        or_(
            Interviewer.faculties.like(f"{user_faculty},%"),
            Interviewer.faculties.like(f"%,{user_faculty},%"),
            Interviewer.faculties.like(f"%,{user_faculty}"),
            Interviewer.faculties == user_faculty
        )
    ).order_by(TimeSlot.date, TimeSlot.time_start)
    
    result = await session.execute(stmt)
    available_slots = result.scalars().all()
    
    if not available_slots:
        await message.answer(
            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ {user_faculty}.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await state.clear()
        return
    
    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –¥–∞—Ç—É (—É –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –¥–∞—Ç–∞)
    selected_date = available_slots[0].date
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
    slots_for_date = [s for s in available_slots if s.date == selected_date]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    times_dict = {}
    for slot in slots_for_date:
        time_key = f"{slot.time_start}-{slot.time_end}"
        if time_key not in times_dict:
            times_dict[time_key] = []
        times_dict[time_key].append(slot)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ª–æ—Ç
    if not times_dict:
        await message.answer(
            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ {user_faculty}.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
    await state.update_data(
        faculty=user_faculty,
        selected_date=selected_date,
        times_dict=times_dict
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –í–ï–†–¢–ò–ö–ê–õ–¨–ù–û (–ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥)
    kb = InlineKeyboardBuilder()
    times = sorted(times_dict.keys())
    for time_key in times:
        time_start = time_key.split('-')[0]
        kb.row(InlineKeyboardButton(
            text=f"üïê {time_start}",
            callback_data=f"sobes_time:{time_key}"
        ))
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    date_parts = selected_date.split('-')
    date_display = f"{date_parts[2]}.{date_parts[1]}.{date_parts[0]}"
    
    await message.answer(
        f"üéì –§–∞–∫—É–ª—å—Ç–µ—Ç: {user_faculty}\n"
        f"üìÖ –î–∞—Ç–∞: {date_display}\n\n"
        f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
        reply_markup=kb.as_markup()
    )
    await state.set_state(BookingSobesStates.waiting_time)


@interview_router.callback_query(F.data.startswith('select_faculty:'))
async def select_faculty_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞."""
    _, faculty = callback.data.split(':', 1)
    
    async with async_session_maker() as session:
        await show_available_times(callback.message, session, faculty, state)
    
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass


@interview_router.callback_query(F.data.startswith('sobes_time:'))
async def sobes_time_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    _, time_key = callback.data.split(':', 1)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    user_faculty = data.get('faculty')
    selected_date = data.get('selected_date')
    times_dict = data.get('times_dict', {})
    
    if not all([user_faculty, selected_date, times_dict]):
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /sobes")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è
    available_slots = times_dict.get(time_key, [])
    
    if not available_slots:
        await callback.message.edit_text(
            "üòî –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /sobes"
        )
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–ª–æ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    selected_slot_id = random.choice([s.id for s in available_slots])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ state
    await state.update_data(selected_slot_id=selected_slot_id, selected_time=time_key)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    date_parts = selected_date.split('-')
    date_display = f"{date_parts[2]}.{date_parts[1]}.{date_parts[0]}"
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="sobes_confirm:yes"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="sobes_confirm:no")
    )
    
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ:\n\n"
        f"üéì –§–∞–∫—É–ª—å—Ç–µ—Ç: {user_faculty}\n"
        f"üìÖ –î–∞—Ç–∞: {date_display}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time_key}\n\n"
        f"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è?",
        reply_markup=kb.as_markup()
    )
    
    await state.set_state(BookingSobesStates.waiting_confirmation)
    
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass


@interview_router.callback_query(F.data.startswith('sobes_confirm:'))
async def sobes_confirm_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."""
    _, answer = callback.data.split(':', 1)
    
    if answer == 'no':
        await callback.message.edit_text(
            "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sobes —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞."
        )
        await state.clear()
        try:
            await callback.answer()
        except TelegramBadRequest:
            pass
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    user_faculty = data.get('faculty')
    selected_date = data.get('selected_date')
    selected_time = data.get('selected_time')
    selected_slot_id = data.get('selected_slot_id')
    
    tg_id = callback.from_user.id
    
    async with async_session_maker() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º BotUser
            bot_user_stmt = select(BotUser).where(BotUser.tg_id == tg_id)
            bot_user_result = await session.execute(bot_user_stmt)
            bot_user = bot_user_result.scalars().first()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç –° –ë–õ–û–ö–ò–†–û–í–ö–û–ô (FOR UPDATE)
            # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç race condition –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
            slot_stmt = select(TimeSlot).where(TimeSlot.id == selected_slot_id).with_for_update()
            slot_result = await session.execute(slot_stmt)
            slot = slot_result.scalars().first()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ª–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if not slot or not slot.is_available:
                await callback.message.edit_text(
                    "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sobes —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
                )
                await state.clear()
                try:
                    await callback.answer("–í—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ", show_alert=True)
                except TelegramBadRequest:
                    pass
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç –µ—â—ë –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏
            existing_interview_stmt = select(Interview).where(
                Interview.time_slot_id == selected_slot_id,
                Interview.status.in_(['confirmed', 'pending'])
            )
            existing_interview_result = await session.execute(existing_interview_stmt)
            existing_interview = existing_interview_result.scalars().first()
            
            if existing_interview:
                # –°–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç, –Ω–æ is_available –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è (–±–∞–≥ –≤ –ª–æ–≥–∏–∫–µ –æ—Ç–º–µ–Ω—ã)
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º is_available –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                slot.is_available = False
                await session.commit()
                
                await callback.message.edit_text(
                    "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sobes —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
                )
                await state.clear()
                try:
                    await callback.answer("–í—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ", show_alert=True)
                except TelegramBadRequest:
                    pass
                return
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç (—á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å UNIQUE constraint)
            # –≠—Ç–æ –Ω—É–∂–Ω–æ –ø–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–∞—Å UNIQUE constraint –Ω–∞ time_slot_id, –∞ –Ω–µ –Ω–∞ (time_slot_id, status)
            cancelled_interviews_stmt = select(Interview).where(
                Interview.time_slot_id == selected_slot_id,
                Interview.status == 'cancelled'
            )
            cancelled_interviews_result = await session.execute(cancelled_interviews_stmt)
            cancelled_interviews = cancelled_interviews_result.scalars().all()
            
            if cancelled_interviews:
                for cancelled in cancelled_interviews:
                    print(f"üóëÔ∏è –£–¥–∞–ª—è—é –æ—Ç–º–µ–Ω—ë–Ω–Ω—É—é –∑–∞–ø–∏—Å—å {cancelled.id} –¥–ª—è —Å–ª–æ—Ç–∞ {selected_slot_id}")
                    session.delete(cancelled)
                
                await session.flush()  # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(cancelled_interviews)} –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–ª–æ—Ç–∞ {selected_slot_id}")
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
            interview = Interview(
                time_slot_id=slot.id,
                interviewer_id=slot.interviewer_id,
                bot_user_id=bot_user.id,
                person_id=bot_user.person_id if bot_user.person_id else None,
                faculty=user_faculty,
                status='confirmed',
                cancellation_allowed=True  # –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å 1 —Ä–∞–∑
            )
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–ª–æ—Ç
            print(f"üîí –ë–ª–æ–∫–∏—Ä—É—é —Å–ª–æ—Ç {slot.id}: is_available={slot.is_available} -> False")
            slot.is_available = False
            
            session.add(interview)
            session.add(slot)
            await session.commit()
            print(f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞, slot_id={slot.id}, interview_id={interview.id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            interviewer_stmt = select(Interviewer).where(Interviewer.id == slot.interviewer_id)
            interviewer_result = await session.execute(interviewer_stmt)
            interviewer = interviewer_result.scalars().first()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_parts = selected_date.split('-')
            date_display = f"{date_parts[2]}.{date_parts[1]}.{date_parts[0]}"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            kb = InlineKeyboardBuilder()
            kb.row(InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"ask_question:{interview.id}"))
            
            await callback.message.edit_text(
                f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!\n\n"
                f"üéì –§–∞–∫—É–ª—å—Ç–µ—Ç: {user_faculty}\n"
                f"üìÖ –î–∞—Ç–∞: {date_display}\n"
                f"‚è∞ –í—Ä–µ–º—è: {selected_time}\n\n"
                f"‚ùóÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.\n"
                f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=kb.as_markup()
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–º—É
            if interviewer and interviewer.telegram_id:
                try:
                    student_name = f"@{callback.from_user.username}" if callback.from_user.username else callback.from_user.full_name
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π bot –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
                    await callback.bot.send_message(
                        interviewer.telegram_id,
                        f"üìå –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!\n\n"
                        f"üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: {student_name}\n"
                        f"üéì –§–∞–∫—É–ª—å—Ç–µ—Ç: {user_faculty}\n"
                        f"üìÖ –î–∞—Ç–∞: {date_display}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {selected_time}\n\n"
                        f"–ö–∞–Ω–¥–∏–¥–∞—Ç –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å –≤–∞–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–º—É: {e}")
            
            await state.clear()
            
            try:
                await callback.answer("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞!")
            except TelegramBadRequest:
                pass
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await state.clear()


@interview_router.callback_query(F.data.startswith('cancel_interview:'))
async def cancel_interview_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ."""
    _, interview_id = callback.data.split(':', 1)
    interview_id = int(interview_id)
    
    tg_id = callback.from_user.id
    
    async with async_session_maker() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
            interview_stmt = select(Interview).where(Interview.id == interview_id)
            interview_result = await session.execute(interview_stmt)
            interview = interview_result.scalars().first()
            
            if not interview:
                await callback.message.edit_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                try:
                    await callback.answer()
                except TelegramBadRequest:
                    pass
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∑–∞–ø–∏—Å—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot_user_stmt = select(BotUser).where(BotUser.tg_id == tg_id)
            bot_user_result = await session.execute(bot_user_stmt)
            bot_user = bot_user_result.scalars().first()
            
            if not bot_user or interview.bot_user_id != bot_user.id:
                await callback.message.edit_text("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞–ø–∏—Å—å.")
                try:
                    await callback.answer()
                except TelegramBadRequest:
                    pass
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
            if not interview.cancellation_allowed:
                await callback.message.edit_text(
                    "‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
                    "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–º–æ—â–∏."
                )
                try:
                    await callback.answer()
                except TelegramBadRequest:
                    pass
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç
            slot_stmt = select(TimeSlot).where(TimeSlot.id == interview.time_slot_id)
            slot_result = await session.execute(slot_stmt)
            slot = slot_result.scalars().first()
            
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç
            if slot:
                print(f"üîì –û—Å–≤–æ–±–æ–∂–¥–∞—é —Å–ª–æ—Ç {slot.id}: is_available={slot.is_available} -> True")
                slot.is_available = True
                session.add(slot)
            else:
                print(f"‚ö†Ô∏è –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è interview {interview.id}, time_slot_id={interview.time_slot_id}")
            
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–ø–∏—Å—å –∫–∞–∫ –æ—Ç–º–µ–Ω—ë–Ω–Ω—É—é
            interview.status = 'cancelled'
            interview.cancelled_at = datetime.now()
            interview.cancellation_allowed = False  # –ë–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω—è—Ç—å
            
            session.add(interview)
            await session.commit()
            print(f"‚úÖ –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ {interview.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–ª–æ—Ç {interview.time_slot_id} –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ –æ–± –æ—Ç–º–µ–Ω–µ
            interviewer_stmt = select(Interviewer).where(Interviewer.id == interview.interviewer_id)
            interviewer_result = await session.execute(interviewer_stmt)
            interviewer = interviewer_result.scalars().first()
            
            if interviewer and interviewer.telegram_id:
                try:
                    student_name = f"@{callback.from_user.username}" if callback.from_user.username else callback.from_user.full_name
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                    if slot:
                        date_parts = slot.date.split('-')
                        date_display = f"{date_parts[2]}.{date_parts[1]}.{date_parts[0]}"
                        time_display = f"{slot.time_start}-{slot.time_end}"
                    else:
                        date_display = "N/A"
                        time_display = "N/A"
                    
                    await callback.bot.send_message(
                        interviewer.telegram_id,
                        f"‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
                        f"üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: {student_name}\n"
                        f"üéì –§–∞–∫—É–ª—å—Ç–µ—Ç: {interview.faculty}\n"
                        f"üìÖ –î–∞—Ç–∞: {date_display}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {time_display}\n\n"
                        f"–°–ª–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏."
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ: {e}")
            
            await callback.message.edit_text(
                "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ /sobes\n\n"
                "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.\n"
                "–ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è."
            )
            
            try:
                await callback.answer("‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
            except TelegramBadRequest:
                pass
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {e}")
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            try:
                await callback.answer()
            except TelegramBadRequest:
                pass


@interview_router.callback_query(F.data.startswith('ask_question:'))
async def ask_question_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'."""
    interview_id = int(callback.data.split(':')[1])
    tg_id = callback.from_user.id
    
    async with async_session_maker() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω—Ç–µ—Ä–≤—å—é —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        stmt = select(Interview).join(BotUser).where(
            Interview.id == interview_id,
            BotUser.tg_id == tg_id
        )
        result = await session.execute(stmt)
        interview = result.scalars().first()
        
        if not interview:
            await callback.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        if interview.status == 'cancelled':
            await callback.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –æ—Ç–º–µ–Ω—ë–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏", show_alert=True)
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º interview_id –≤ state
    await state.update_data(interview_id=interview_id)
    await state.set_state(QuestionStates.waiting_question)
    
    await callback.message.edit_text(
        "üìù –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–º—É:\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
        "–°–æ–±–µ—Å–µ–¥—É—é—â–∏–π –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å."
    )
    
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass


@interview_router.message(QuestionStates.waiting_question)
async def process_question(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."""
    question_text = message.text.strip()
    
    if not question_text:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    if len(question_text) > 1000:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤). –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç:")
        return
    
    data = await state.get_data()
    interview_id = data.get('interview_id')
    tg_id = message.from_user.id
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ
        stmt = select(Interview).where(Interview.id == interview_id)
        result = await session.execute(stmt)
        interview = result.scalars().first()
        
        if not interview:
            await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ
        stmt = select(Interviewer).where(Interviewer.id == interview.interviewer_id)
        result = await session.execute(stmt)
        interviewer = result.scalars().first()
        
        if not interviewer:
            await message.answer("‚ùå –°–æ–±–µ—Å–µ–¥—É—é—â–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        new_message = InterviewMessage(
            interview_id=interview_id,
            from_user_id=tg_id,
            to_user_id=interviewer.telegram_id,
            message_text=question_text,
            is_read=False
        )
        session.add(new_message)
        await session.commit()
        await session.refresh(new_message)
        message_db_id = new_message.id
    
    await state.clear()
    await message.answer(
        "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–º—É!\n\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–º—É
    try:
        kb = InlineKeyboardBuilder()
        kb.row(InlineKeyboardButton(
            text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å",
            callback_data=f"answer_question:{message_db_id}"
        ))
        
        await message.bot.send_message(
            interviewer.telegram_id,
            f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:\n\n"
            f"<b>–í–æ–ø—Ä–æ—Å:</b>\n{question_text}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å.",
            parse_mode="HTML",
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–º—É: {e}")


@interview_router.callback_query(F.data.startswith('answer_question:'))
async def answer_question_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å' –æ—Ç —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ."""
    message_id = int(callback.data.split(':')[1])
    tg_id = callback.from_user.id
    
    async with async_session_maker() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ —ç—Ç–æ–º—É —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–º—É
        stmt = select(InterviewMessage).where(
            InterviewMessage.id == message_id,
            InterviewMessage.to_user_id == tg_id
        )
        result = await session.execute(stmt)
        msg = result.scalars().first()
        
        if not msg:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        msg.is_read = True
        await session.commit()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ state
    await state.update_data(message_id=message_id, question_text=msg.message_text)
    await state.set_state(QuestionStates.waiting_answer)
    
    await callback.message.edit_text(
        f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:\n\n"
        f"<i>{msg.message_text}</i>\n\n"
        f"üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:",
        parse_mode="HTML"
    )
    
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass


@interview_router.message(QuestionStates.waiting_answer)
async def process_answer(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ."""
    answer_text = message.text.strip()
    
    if not answer_text:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    if len(answer_text) > 1000:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤). –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç:")
        return
    
    data = await state.get_data()
    original_message_id = data.get('message_id')
    question_text = data.get('question_text')
    tg_id = message.from_user.id
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        stmt = select(InterviewMessage).where(InterviewMessage.id == original_message_id)
        result = await session.execute(stmt)
        original_msg = result.scalars().first()
        
        if not original_msg:
            await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î
        answer_message = InterviewMessage(
            interview_id=original_msg.interview_id,
            from_user_id=tg_id,
            to_user_id=original_msg.from_user_id,
            message_text=answer_text,
            is_read=False
        )
        session.add(answer_message)
        await session.commit()
    
    await state.clear()
    await message.answer(
        "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç—É!\n\n"
        "–ö–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –æ—Ç–≤–µ—Ç–æ–º."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—É
    try:
        await message.bot.send_message(
            original_msg.from_user_id,
            f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ:\n\n"
            f"<b>–í–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n<i>{question_text}</i>\n\n"
            f"<b>–û—Ç–≤–µ—Ç:</b>\n{answer_text}",
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—É: {e}")


@interview_router.message(Command('my_interviews'))
async def my_interviews_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π (–¥–ª—è —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ)."""
    tg_id = message.from_user.id
    
    async with async_session_maker() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–º
        stmt = select(Interviewer).where(Interviewer.telegram_id == tg_id)
        result = await session.execute(stmt)
        interviewer = result.scalars().first()
        
        if not interviewer:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–π.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register_sobes –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ
        stmt = select(Interview).where(
            Interview.interviewer_id == interviewer.id,
            Interview.status.in_(['confirmed', 'pending'])
        ).join(TimeSlot).order_by(TimeSlot.date, TimeSlot.time_start)
        result = await session.execute(stmt)
        interviews = result.scalars().all()
        
        if not interviews:
            await message.answer(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.\n\n"
                "–ö–æ–≥–¥–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞—á–Ω—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è, –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏—Ö –∑–¥–µ—Å—å."
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        from collections import defaultdict
        by_date = defaultdict(list)
        
        for interview in interviews:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç
            stmt = select(TimeSlot).where(TimeSlot.id == interview.time_slot_id)
            result = await session.execute(stmt)
            slot = result.scalars().first()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            stmt = select(BotUser).where(BotUser.id == interview.bot_user_id)
            result = await session.execute(stmt)
            bot_user = result.scalars().first()
            
            # –ü–æ–ª—É—á–∞–µ–º Person –µ—Å–ª–∏ –µ—Å—Ç—å
            person_name = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            if interview.person_id:
                stmt = select(Person).where(Person.id == interview.person_id)
                result = await session.execute(stmt)
                person = result.scalars().first()
                if person:
                    person_name = person.full_name
            
            by_date[slot.date].append({
                'time': f"{slot.time_start}-{slot.time_end}",
                'candidate': person_name,
                'faculty': interview.faculty or "–ù–µ —É–∫–∞–∑–∞–Ω",
                'username': f"@{bot_user.telegram_username}" if bot_user.telegram_username else "–ù–µ—Ç username"
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"üìã <b>–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è</b>\n\n"
        
        for date in sorted(by_date.keys()):
            text += f"üìÖ <b>{date}</b>\n"
            for interview in by_date[date]:
                text += (
                    f"  üïê {interview['time']}\n"
                    f"     üë§ {interview['candidate']}\n"
                    f"     üéì {interview['faculty']}\n"
                    f"     üì± {interview['username']}\n\n"
                )
        
        text += f"<b>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:</b> {len(interviews)}"
        
        await message.answer(text, parse_mode="HTML")


@interview_router.message(Command('sobeser_stats'))
async def sobeser_stats_command(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–º (–¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    ADMIN_ID = 922109605  # TODO: –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥
    
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö
        stmt = select(Interviewer).where(Interviewer.is_active == True).order_by(Interviewer.full_name)
        result = await session.execute(stmt)
        interviewers = result.scalars().all()
        
        if not interviewers:
            await message.answer("üìã –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö.")
            return
        
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–º</b>\n\n"
        
        total_slots = 0
        total_booked = 0
        total_free = 0
        
        for interviewer in interviewers:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ
            slots_stmt = select(TimeSlot).where(TimeSlot.interviewer_id == interviewer.id)
            slots_result = await session.execute(slots_stmt)
            slots = slots_result.scalars().all()
            
            if not slots:
                continue
            
            # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            free_slots = sum(1 for s in slots if s.is_available)
            booked_slots = len(slots) - free_slots
            
            total_slots += len(slots)
            total_booked += booked_slots
            total_free += free_slots
            
            # –§–∞–∫—É–ª—å—Ç–µ—Ç—ã
            faculties_str = interviewer.faculties if interviewer.faculties else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
            
            text += (
                f"üë§ <b>{interviewer.full_name}</b>\n"
                f"   ID: {interviewer.interviewer_sheet_id}\n"
                f"   üéì –§–∞–∫—É–ª—å—Ç–µ—Ç—ã: {faculties_str}\n"
                f"   üìä –°–ª–æ—Ç–æ–≤: {len(slots)} (üü¢ {free_slots} —Å–≤–æ–±–æ–¥–Ω–æ, üî¥ {booked_slots} –∑–∞–Ω—è—Ç–æ)\n\n"
            )
        
        text += (
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"<b>–ò—Ç–æ–≥–æ:</b>\n"
            f"üë• –°–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö: {len(interviewers)}\n"
            f"üìä –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: {total_slots}\n"
            f"üü¢ –°–≤–æ–±–æ–¥–Ω–æ: {total_free}\n"
            f"üî¥ –ó–∞–Ω—è—Ç–æ: {total_booked}"
        )
        
        await message.answer(text, parse_mode="HTML")

