from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy import select, and_, or_
from db.engine import async_session_maker
from db.models import Interviewer, BotUser, TimeSlot, Interview, Person
from utils.google_sheets import find_interviewer_by_code, get_schedules_data
from datetime import datetime
import random


interview_router = Router()


class RegisterSobesStates(StatesGroup):
    waiting_code = State()
    waiting_confirmation = State()


class BookingSobesStates(StatesGroup):
    waiting_date = State()
    waiting_time = State()
    waiting_confirmation = State()


@interview_router.message(Command('register_sobes'))
async def register_sobes_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ."""
    tg_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
    async with async_session_maker() as session:
        stmt = select(Interviewer).where(Interviewer.telegram_id == tg_id)
        result = await session.execute(stmt)
        existing = result.scalars().first()
        
        if existing:
            await message.answer(
                f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–π!\n\n"
                f"–§–ò–û: {existing.full_name}\n"
                f"ID: {existing.interviewer_sheet_id}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_interviews –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π."
            )
            return
    
    await state.set_state(RegisterSobesStates.waiting_code)
    await message.answer(
        "üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ (5 —Å–∏–º–≤–æ–ª–æ–≤):"
    )


@interview_router.message(RegisterSobesStates.waiting_code)
async def register_sobes_code(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞."""
    code = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π
    if not code:
        await message.answer(
            "‚ùå –ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–æ–¥–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ 5 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(code) != 5:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞.\n\n"
            "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    
    # –ò—â–µ–º –≤ Google Sheets
    try:
        interviewer_data = find_interviewer_by_code(code)
        
        if not interviewer_data:
            await message.answer(
                "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
        await state.update_data(
            full_name=interviewer_data['full_name'],
            access_code=interviewer_data['access_code'],
            interviewer_sheet_id=interviewer_data['interviewer_sheet_id']
        )
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        kb = InlineKeyboardBuilder()
        kb.row(
            InlineKeyboardButton(text="‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_interviewer:yes"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, —ç—Ç–æ –Ω–µ —è", callback_data="confirm_interviewer:no")
        )
        
        await state.set_state(RegisterSobesStates.waiting_confirmation)
        await message.answer(
            f"üîç –ù–∞–π–¥–µ–Ω–æ!\n\n"
            f"–§–ò–û: {interviewer_data['full_name']}\n"
            f"ID: {interviewer_data['interviewer_sheet_id']}\n\n"
            f"–≠—Ç–æ –≤—ã?",
            reply_markup=kb.as_markup()
        )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await state.clear()


@interview_router.callback_query(F.data.startswith('confirm_interviewer:'))
async def confirm_interviewer(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    _, answer = callback.data.split(':', 1)
    
    if answer == 'no':
        await callback.message.edit_text(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register_sobes —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞."
        )
        await state.clear()
        try:
            await callback.answer()
        except TelegramBadRequest:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "query too old"
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    full_name = data.get('full_name')
    access_code = data.get('access_code')
    interviewer_sheet_id = data.get('interviewer_sheet_id')
    
    tg_user = callback.from_user
    tg_id = tg_user.id
    username = tg_user.username
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with async_session_maker() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â—ë —Ä–∞–∑, –≤–¥—Ä—É–≥ —É–∂–µ –µ—Å—Ç—å
            stmt = select(Interviewer).where(Interviewer.telegram_id == tg_id)
            result = await session.execute(stmt)
            existing = result.scalars().first()
            
            if existing:
                await callback.message.edit_text(
                    "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                    f"–§–ò–û: {existing.full_name}"
                )
                await state.clear()
                try:
                    await callback.answer()
                except TelegramBadRequest:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "query too old"
                return
            
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ
            interviewer = Interviewer(
                full_name=full_name,
                telegram_id=tg_id,
                telegram_username=username.lower() if username else None,
                interviewer_sheet_id=interviewer_sheet_id,
                access_code=access_code,
                is_active=True
            )
            
            session.add(interviewer)
            await session.commit()
            
            await callback.message.edit_text(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–§–ò–û: {full_name}\n"
                f"ID: {interviewer_sheet_id}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ /my_interviews - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏\n\n"
                "–ê–¥–º–∏–Ω —Å–º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤–∞–º —Å–ª–æ—Ç—ã –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π."
            )
            
            await state.clear()
            try:
                await callback.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            except TelegramBadRequest:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "query too old"
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ: {e}")
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await state.clear()
            try:
                await callback.answer()
            except TelegramBadRequest:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "query too old"


@interview_router.message(Command('cancel'))
async def cancel_registration(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")
        return
    
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@interview_router.message(Command('sync_slots'))
async def sync_slots(message: types.Message):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤ –∏–∑ Google Sheets (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    ADMIN_ID = 922109605  # TODO: –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥
    
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–ª–æ—Ç–æ–≤ –∏–∑ Google Sheets...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
        slots_data, interviewer_stats = get_schedules_data()
        
        if not slots_data:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
            return
        
        async with async_session_maker() as session:
            added = 0
            updated = 0
            skipped = 0
            errors = 0
            
            for slot_info in slots_data:
                try:
                    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ –ø–æ interviewer_sheet_id
                    interviewer_stmt = select(Interviewer).where(
                        Interviewer.interviewer_sheet_id == slot_info['interviewer_sheet_id']
                    )
                    interviewer_result = await session.execute(interviewer_stmt)
                    interviewer = interviewer_result.scalars().first()
                    
                    if not interviewer:
                        # –°–æ–±–µ—Å–µ–¥—É—é—â–∏–π –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        skipped += 1
                        continue
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ
                    faculties_str = ",".join(slot_info['faculties'])
                    if interviewer.faculties != faculties_str:
                        interviewer.faculties = faculties_str
                        session.add(interviewer)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–ª–æ—Ç
                    existing_slot_stmt = select(TimeSlot).where(
                        TimeSlot.interviewer_id == interviewer.id,
                        TimeSlot.date == slot_info['date'],
                        TimeSlot.time_start == slot_info['time_start']
                    )
                    existing_slot_result = await session.execute(existing_slot_stmt)
                    existing_slot = existing_slot_result.scalars().first()
                    
                    if existing_slot:
                        # –°–ª–æ—Ç —É–∂–µ –µ—Å—Ç—å - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —Å–≤–æ–±–æ–¥–µ–Ω
                        if existing_slot.is_available:
                            existing_slot.time_end = slot_info['time_end']
                            existing_slot.google_sheet_sync = datetime.now()
                            session.add(existing_slot)
                            updated += 1
                        else:
                            # –°–ª–æ—Ç –∑–∞–Ω—è—Ç - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
                            skipped += 1
                    else:
                        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ª–æ—Ç
                        new_slot = TimeSlot(
                            interviewer_id=interviewer.id,
                            date=slot_info['date'],
                            time_start=slot_info['time_start'],
                            time_end=slot_info['time_end'],
                            is_available=True,
                            google_sheet_sync=datetime.now()
                        )
                        session.add(new_slot)
                        added += 1
                
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ—Ç–∞: {e}")
                    errors += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_message = (
                f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤: {added}\n"
                f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {updated}\n"
                f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–∑–∞–Ω—è—Ç–æ –∏–ª–∏ –Ω–µ—Ç —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ): {skipped}\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫: {errors}\n\n"
                f"üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(slots_data)} —Å–ª–æ—Ç–æ–≤ –∏–∑ Google Sheets\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–º
            if interviewer_stats:
                stats_message += f"\nüë• –°–ª–æ—Ç—ã –ø–æ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–º:\n"
                for interviewer_name, count in sorted(interviewer_stats.items()):
                    stats_message += f"‚Ä¢ {interviewer_name}: {count} —Å–ª–æ—Ç–æ–≤\n"
            
            await message.answer(stats_message)
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:\n{str(e)}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ Google Sheets –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å credentials."
        )


@interview_router.message(Command('sobes'))
async def sobes_start(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ."""
    tg_id = message.from_user.id
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º BotUser
        stmt = select(BotUser).where(BotUser.tg_id == tg_id)
        result = await session.execute(stmt)
        bot_user = result.scalars().first()
        
        if not bot_user:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
        existing_stmt = select(Interview).where(
            Interview.bot_user_id == bot_user.id,
            Interview.status.in_(['confirmed', 'pending'])
        )
        existing_result = await session.execute(existing_stmt)
        existing_interview = existing_result.scalars().first()
        
        if existing_interview:
            slot_stmt = select(TimeSlot).where(TimeSlot.id == existing_interview.time_slot_id)
            slot_result = await session.execute(slot_stmt)
            slot = slot_result.scalars().first()
            
            kb = InlineKeyboardBuilder()
            if existing_interview.cancellation_allowed:
                kb.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_interview:{existing_interview.id}"))
            kb.row(InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–º—É", callback_data=f"ask_question:{existing_interview.id}"))
            
            await message.answer(
                f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!\n\n"
                f"üìÖ –î–∞—Ç–∞: {slot.date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {slot.time_start} - {slot.time_end}\n"
                f"üéì –§–∞–∫—É–ª—å—Ç–µ—Ç: {existing_interview.faculty}\n",
                reply_markup=kb.as_markup()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º Person –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
        person = None
        if bot_user.person_id:
            person_stmt = select(Person).where(Person.id == bot_user.person_id)
            person_result = await session.execute(person_stmt)
            person = person_result.scalars().first()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        user_faculty = None
        if person and person.faculty:
            user_faculty = person.faculty.strip()
        
        if not user_faculty:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
            faculties = ["–°–ù–∏–ú–ö", "–ú–≠–û", "–§–≠–ë", "–Æ—Ä—Ñ–∞–∫", "–ò–¢–∏–ê–ë–î", "–§–∏–Ω–§–∞–∫", "–ù–ê–ë", "–í–®–£"]
            
            kb = InlineKeyboardBuilder()
            for fac in faculties:
                kb.row(InlineKeyboardButton(text=fac, callback_data=f"select_faculty:{fac}"))
            
            await message.answer(
                "üéì –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:",
                reply_markup=kb.as_markup()
            )
            await state.set_state(BookingSobesStates.waiting_date)
            return
        
        # –§–∞–∫—É–ª—å—Ç–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
        await show_available_dates(message, session, user_faculty, state)


async def show_available_dates(message: types.Message, session, user_faculty: str, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏."""
    # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    stmt = select(TimeSlot).join(Interviewer).where(
        TimeSlot.is_available == True,
        or_(
            Interviewer.faculties.contains(user_faculty),
            Interviewer.faculties == user_faculty
        )
    ).order_by(TimeSlot.date, TimeSlot.time_start)
    
    result = await session.execute(stmt)
    available_slots = result.scalars().all()
    
    if not available_slots:
        await message.answer(
            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ {user_faculty}.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await state.clear()
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
    dates_dict = {}
    for slot in available_slots:
        if slot.date not in dates_dict:
            dates_dict[slot.date] = []
        dates_dict[slot.date].append(slot)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    dates = sorted(dates_dict.keys())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –≤ state
    await state.update_data(faculty=user_faculty)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏
    kb = InlineKeyboardBuilder()
    for date in dates:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∫—Ä–∞—Å–∏–≤–æ
        date_parts = date.split('-')
        date_str = f"{date_parts[2]}.{date_parts[1]}"
        slots_count = len(dates_dict[date])
        kb.row(InlineKeyboardButton(
            text=f"{date_str} ({slots_count} —Å–ª–æ—Ç–æ–≤)",
            callback_data=f"sobes_date:{date}"
        ))
    
    await message.answer(
        f"üéì –§–∞–∫—É–ª—å—Ç–µ—Ç: {user_faculty}\n\n"
        f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:",
        reply_markup=kb.as_markup()
    )
    await state.set_state(BookingSobesStates.waiting_date)


@interview_router.callback_query(F.data.startswith('select_faculty:'))
async def select_faculty_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞."""
    _, faculty = callback.data.split(':', 1)
    
    async with async_session_maker() as session:
        await show_available_dates(callback.message, session, faculty, state)
    
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass


@interview_router.callback_query(F.data.startswith('sobes_date:'))
async def sobes_date_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."""
    _, selected_date = callback.data.split(':', 1)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏–∑ state
    data = await state.get_data()
    user_faculty = data.get('faculty')
    
    if not user_faculty:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /sobes")
        await state.clear()
        return
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        stmt = select(TimeSlot).join(Interviewer).where(
            TimeSlot.date == selected_date,
            TimeSlot.is_available == True,
            or_(
                Interviewer.faculties.contains(user_faculty),
                Interviewer.faculties == user_faculty
            )
        ).order_by(TimeSlot.time_start)
        
        result = await session.execute(stmt)
        available_slots = result.scalars().all()
        
        if not available_slots:
            await callback.message.edit_text(
                f"üòî –ù–∞ {selected_date} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /sobes"
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        times_dict = {}
        for slot in available_slots:
            time_key = f"{slot.time_start}-{slot.time_end}"
            if time_key not in times_dict:
                times_dict[time_key] = []
            times_dict[time_key].append(slot)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ state
        await state.update_data(selected_date=selected_date, times_dict=times_dict)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
        kb = InlineKeyboardBuilder()
        times = sorted(times_dict.keys())
        for i in range(0, len(times), 3):
            row_times = times[i:i+3]
            for time_key in row_times:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                time_start = time_key.split('-')[0]
                kb.add(InlineKeyboardButton(
                    text=time_start,
                    callback_data=f"sobes_time:{time_key}"
                ))
            kb.row()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        date_parts = selected_date.split('-')
        date_display = f"{date_parts[2]}.{date_parts[1]}.{date_parts[0]}"
        
        await callback.message.edit_text(
            f"üéì –§–∞–∫—É–ª—å—Ç–µ—Ç: {user_faculty}\n"
            f"üìÖ –î–∞—Ç–∞: {date_display}\n\n"
            f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=kb.as_markup()
        )
        
        await state.set_state(BookingSobesStates.waiting_time)
    
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass


@interview_router.callback_query(F.data.startswith('sobes_time:'))
async def sobes_time_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    _, time_key = callback.data.split(':', 1)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    user_faculty = data.get('faculty')
    selected_date = data.get('selected_date')
    times_dict = data.get('times_dict', {})
    
    if not all([user_faculty, selected_date, times_dict]):
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /sobes")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è
    available_slots = times_dict.get(time_key, [])
    
    if not available_slots:
        await callback.message.edit_text(
            "üòî –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /sobes"
        )
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–ª–æ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    selected_slot_id = random.choice([s.id for s in available_slots])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ state
    await state.update_data(selected_slot_id=selected_slot_id, selected_time=time_key)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    date_parts = selected_date.split('-')
    date_display = f"{date_parts[2]}.{date_parts[1]}.{date_parts[0]}"
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="sobes_confirm:yes"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="sobes_confirm:no")
    )
    
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ:\n\n"
        f"üéì –§–∞–∫—É–ª—å—Ç–µ—Ç: {user_faculty}\n"
        f"üìÖ –î–∞—Ç–∞: {date_display}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time_key}\n\n"
        f"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è?",
        reply_markup=kb.as_markup()
    )
    
    await state.set_state(BookingSobesStates.waiting_confirmation)
    
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass


@interview_router.callback_query(F.data.startswith('sobes_confirm:'))
async def sobes_confirm_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."""
    _, answer = callback.data.split(':', 1)
    
    if answer == 'no':
        await callback.message.edit_text(
            "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sobes —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞."
        )
        await state.clear()
        try:
            await callback.answer()
        except TelegramBadRequest:
            pass
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    user_faculty = data.get('faculty')
    selected_date = data.get('selected_date')
    selected_time = data.get('selected_time')
    selected_slot_id = data.get('selected_slot_id')
    
    tg_id = callback.from_user.id
    
    async with async_session_maker() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º BotUser
            bot_user_stmt = select(BotUser).where(BotUser.tg_id == tg_id)
            bot_user_result = await session.execute(bot_user_stmt)
            bot_user = bot_user_result.scalars().first()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç
            slot_stmt = select(TimeSlot).where(TimeSlot.id == selected_slot_id)
            slot_result = await session.execute(slot_stmt)
            slot = slot_result.scalars().first()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ª–æ—Ç –µ—â—ë –¥–æ—Å—Ç—É–ø–µ–Ω
            if not slot or not slot.is_available:
                await callback.message.edit_text(
                    "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sobes —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
                )
                await state.clear()
                return
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
            interview = Interview(
                time_slot_id=slot.id,
                interviewer_id=slot.interviewer_id,
                bot_user_id=bot_user.id,
                person_id=bot_user.person_id if bot_user.person_id else None,
                faculty=user_faculty,
                status='confirmed',
                cancellation_allowed=True  # –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å 1 —Ä–∞–∑
            )
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–ª–æ—Ç
            slot.is_available = False
            
            session.add(interview)
            session.add(slot)
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            interviewer_stmt = select(Interviewer).where(Interviewer.id == slot.interviewer_id)
            interviewer_result = await session.execute(interviewer_stmt)
            interviewer = interviewer_result.scalars().first()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_parts = selected_date.split('-')
            date_display = f"{date_parts[2]}.{date_parts[1]}.{date_parts[0]}"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            kb = InlineKeyboardBuilder()
            kb.row(InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"ask_question:{interview.id}"))
            kb.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_interview:{interview.id}"))
            
            await callback.message.edit_text(
                f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!\n\n"
                f"üéì –§–∞–∫—É–ª—å—Ç–µ—Ç: {user_faculty}\n"
                f"üìÖ –î–∞—Ç–∞: {date_display}\n"
                f"‚è∞ –í—Ä–µ–º—è: {selected_time}\n\n"
                f"‚ùó –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.\n"
                f"–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!",
                reply_markup=kb.as_markup()
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–º—É
            if interviewer and interviewer.telegram_id:
                try:
                    from aiogram import Bot
                    bot = Bot(token=callback.bot.token)
                    
                    student_name = f"@{callback.from_user.username}" if callback.from_user.username else callback.from_user.full_name
                    
                    await bot.send_message(
                        interviewer.telegram_id,
                        f"üìå –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!\n\n"
                        f"üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: {student_name}\n"
                        f"üéì –§–∞–∫—É–ª—å—Ç–µ—Ç: {user_faculty}\n"
                        f"üìÖ –î–∞—Ç–∞: {date_display}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {selected_time}\n\n"
                        f"–ö–∞–Ω–¥–∏–¥–∞—Ç –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å –≤–∞–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–º—É: {e}")
            
            await state.clear()
            
            try:
                await callback.answer("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞!")
            except TelegramBadRequest:
                pass
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await state.clear()

