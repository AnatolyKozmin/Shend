from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from db.engine import async_session_maker
from db.models import Person, BotUser
from sqlalchemy import select, func


user_router = Router()


@user_router.message(CommandStart())
async def user_start(message: types.Message):
    """–ü—Ä–∏ /start –ø—ã—Ç–∞–µ–º—Å—è —Å–≤—è–∑–∞—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º-—é–∑–µ—Ä–∞ —Å –∑–∞–ø–∏—Å—å—é –≤ Person –ø–æ telegram_username.

    –õ–æ–≥–∏–∫–∞:
    - –≤–∑—è—Ç—å message.from_user.id –∏ username (–µ—Å–ª–∏ –µ—Å—Ç—å)
    - –ø–æ–∏—Å–∫–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ Person –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º telegram_username (–≤–Ω—É—Ç—Ä–∏ –ë–î –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç —Å @, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞)
    - –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å Person ‚Äî —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å BotUser, —Å–≤—è–∑–∞—Ç—å person_id
    - –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    """
    tg_user = message.from_user
    tg_id = tg_user.id
    raw_username = tg_user.username

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º username: —É–¥–∞–ª—è–µ–º –≤–µ–¥—É—â–∏–π @ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    if raw_username:
        username = str(raw_username).strip().lstrip('@').lower()
        username_with_at = f"@{username}"
    else:
        username = None
        username_with_at = None

    async with async_session_maker() as session:
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ Person –ø–æ username —Å @ –∏–ª–∏ –±–µ–∑
        person_stmt = None
        if username_with_at:
            person_stmt = select(Person).where(
                (Person.telegram_username == username_with_at) | (Person.telegram_username == username)
            )
        else:
            person_stmt = select(Person).where(Person.telegram_username == None)

        result = await session.execute(person_stmt)
        person = result.scalars().first()

        # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º BotUser
        stmt = select(BotUser).where(BotUser.tg_id == tg_id)
        res = await session.execute(stmt)
        bot_user = res.scalars().first()

        if bot_user:
            # –û–±–Ω–æ–≤–ª—è–µ–º username (—Ö—Ä–∞–Ω–∏–º –≤ –ë–î –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ @) –∏ —Å–≤—è–∑—å –Ω–∞ Person –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            changed = False
            # bot_user.telegram_username –≤ –±–∞–∑–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –±–µ–∑ @ –∏ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            if username and bot_user.telegram_username != username:
                bot_user.telegram_username = username
                changed = True
            if person and bot_user.person_id != person.id:
                bot_user.person_id = person.id
                changed = True
            if changed:
                session.add(bot_user)
                await session.commit()
        else:
            bot_user = BotUser(tg_id=tg_id, telegram_username=username, person_id=person.id if person else None)
            session.add(bot_user)
            await session.commit()

    START_MESSAGE = (
        "–ü—Ä–∏–≤–µ—Ç!\n\n"
        "–≠—Ç–æ –±–æ—Ç ¬´–®–∫–æ–ª—ã –ê–∫—Ç–∏–≤–∞¬ª, –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É –Ω–µ —Å—Ç–∞–≤—å –µ–≥–æ –≤ –º—å—é—Ç –∏ —Å–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏. ü§ç"
    )

    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(text=START_MESSAGE)

    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–≤—è–∑—å
    if person:
        await message.answer(text=f"{person.full_name}, —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ !")
    else:
        await message.answer(text=(
            "–ï—Å–ª–∏ —É –≤–∞—Å —Å–∫—Ä—ã—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram‚Äëusername, –ª–∏–±–æ –º—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—à—É –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ,\n"
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –®–ê https://vk.com/schoolofactivity?from=groups"
        ))


@user_router.message(Command('get_people'))
async def get_people_by_faculty(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª—é–¥–µ–π –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
    1. –õ—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–∏–ª–∏—Å—å –≤ –±–æ—Ç–∞ (–µ—Å—Ç—å –≤ BotUser)
    2. –õ—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –±–æ—Ç–µ (–µ—Å—Ç—å –≤ Person, –Ω–æ –Ω–µ—Ç –≤ BotUser) —Å –∏—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–∞–º–∏
    """
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ª—é–¥–µ–π —Å –∏—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏
        people_stmt = select(Person).where(Person.faculty.isnot(None)).order_by(Person.faculty, Person.full_name)
        people_result = await session.execute(people_stmt)
        all_people = people_result.scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ —Å –∏—Ö —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ Person
        bot_users_stmt = select(BotUser).where(BotUser.person_id.isnot(None))
        bot_users_result = await session.execute(bot_users_stmt)
        bot_users = bot_users_result.scalars().all()
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ ID –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –±–æ—Ç–µ
        people_in_bot_ids = {bu.person_id for bu in bot_users}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ª—é–¥–µ–π –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º
        faculty_groups = {}
        for person in all_people:
            faculty = person.faculty or "–ë–µ–∑ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞"
            if faculty not in faculty_groups:
                faculty_groups[faculty] = {"in_bot": [], "not_in_bot": []}
            
            if person.id in people_in_bot_ids:
                faculty_groups[faculty]["in_bot"].append(person)
            else:
                faculty_groups[faculty]["not_in_bot"].append(person)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not faculty_groups:
            await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ª—é–¥–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_in_bot = sum(len(groups["in_bot"]) for groups in faculty_groups.values())
        total_not_in_bot = sum(len(groups["not_in_bot"]) for groups in faculty_groups.values())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–Ω–∞—á–∞–ª–∞
        stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º\n\n"
        stats_text += f"‚úÖ –í –±–æ—Ç–µ: {total_in_bot} —á–µ–ª.\n"
        stats_text += f"‚ùå –ù–µ –≤ –±–æ—Ç–µ: {total_not_in_bot} —á–µ–ª.\n"
        stats_text += f"üìà –í—Å–µ–≥–æ: {total_in_bot + total_not_in_bot} —á–µ–ª.\n\n"
        stats_text += "‚îÄ" * 30
        
        await message.answer(stats_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        for faculty, groups in sorted(faculty_groups.items()):
            faculty_text = f"üéì {faculty}\n\n"
            
            # –õ—é–¥–∏ –≤ –±–æ—Ç–µ
            if groups["in_bot"]:
                faculty_text += f"‚úÖ –í –±–æ—Ç–µ ({len(groups['in_bot'])} —á–µ–ª.):\n"
                for person in groups["in_bot"]:
                    faculty_text += f"‚Ä¢ {person.full_name}\n"
                faculty_text += "\n"
            
            # –õ—é–¥–∏ –Ω–µ –≤ –±–æ—Ç–µ
            if groups["not_in_bot"]:
                faculty_text += f"‚ùå –ù–µ –≤ –±–æ—Ç–µ ({len(groups['not_in_bot'])} —á–µ–ª.):\n"
                for person in groups["not_in_bot"]:
                    telegram_info = f" (@{person.telegram_username})" if person.telegram_username else " (–Ω–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞)"
                    faculty_text += f"‚Ä¢ {person.full_name}{telegram_info}\n"
                faculty_text += "\n"
            
            faculty_text += "‚îÄ" * 30
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
            if faculty_text.strip() != f"üéì {faculty}\n\n‚îÄ" * 30:
                await message.answer(faculty_text)


