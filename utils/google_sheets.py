"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
"""
import gspread
from google.oauth2.service_account import Credentials
from typing import List, Dict, Optional
import time


# URL —Ç–∞–±–ª–∏—Ü—ã —Å —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–º–∏
INTERVIEWERS_SHEET_URL = "https://docs.google.com/spreadsheets/d/132W-Q8bZhyPbfOmJkXpfRLsOZ3l-pqHpO8vmy8hxGec/edit?gid=0#gid=0"
INTERVIEWERS_SHEET_ID = "132W-Q8bZhyPbfOmJkXpfRLsOZ3l-pqHpO8vmy8hxGec"


def get_google_sheets_client():
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets."""
    scope = [
        'https://spreadsheets.google.com/feeds',
        'https://www.googleapis.com/auth/drive'
    ]
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON —Ñ–∞–π–ª —Å credentials
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    import os
    if os.path.exists('sha-otbor-476513-9c6d0a1d252c.json'):
        credentials_file = 'sha-otbor-476513-9c6d0a1d252c.json'
    elif os.path.exists('credentials.json'):
        credentials_file = 'credentials.json'
    else:
        raise FileNotFoundError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª credentials (sha-otbor-476513-9c6d0a1d252c.json –∏–ª–∏ credentials.json)")
    
    creds = Credentials.from_service_account_file(
        credentials_file,
        scopes=scope
    )
    
    client = gspread.authorize(creds)
    return client


def get_interviewers_data() -> List[Dict[str, str]]:
    """
    –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö –∏–∑ Google Sheets.
    
    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏:
        [
            {
                'full_name': '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω',
                'access_code': '12345',
                'interviewer_sheet_id': 'interviewer_001'
            },
            ...
        ]
    """
    try:
        client = get_google_sheets_client()
        sheet = client.open_by_key(INTERVIEWERS_SHEET_ID)
        worksheet = sheet.worksheet('–ª–∏—Å—Ç')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞—á–∏–Ω–∞—è —Å A1)
        all_values = worksheet.get_all_values()
        
        interviewers = []
        for row in all_values:
            if len(row) >= 3 and row[0]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º 3 –∫–æ–ª–æ–Ω–∫–∏ –∏ –§–ò–û –Ω–µ –ø—É—Å—Ç–æ–µ
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                if row[0].lower() in ['—Ñ–∏–æ', '—Ñ–∞–º–∏–ª–∏—è', '–∏–º—è']:
                    continue
                    
                interviewers.append({
                    'full_name': row[0].strip(),
                    'access_code': row[1].strip() if len(row) > 1 else '',
                    'interviewer_sheet_id': row[2].strip() if len(row) > 2 else ''
                })
        
        return interviewers
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Google Sheets: {e}")
        return []


def find_interviewer_by_code(access_code: str) -> Optional[Dict[str, str]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ –ø–æ –∫–æ–¥—É –¥–æ—Å—Ç—É–ø–∞.
    
    Args:
        access_code: –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ (5 —Ü–∏—Ñ—Ä)
    
    Returns:
        Dict –∏–ª–∏ None: –î–∞–Ω–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    interviewers = get_interviewers_data()
    
    for interviewer in interviewers:
        if interviewer['access_code'] == access_code:
            return interviewer
    
    return None


# URL —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
SCHEDULE_SHEET_URL = "https://docs.google.com/spreadsheets/d/1b89aY_hiv1qaPvE5Iuwr_lKYsvo1e3l3qtOZYSHQoQU/edit"
SCHEDULE_SHEET_ID = "1b89aY_hiv1qaPvE5Iuwr_lKYsvo1e3l3qtOZYSHQoQU"

# –ú–∞–ø–ø–∏–Ω–≥ –ª–∏—Å—Ç–æ–≤ –Ω–∞ –¥–∞—Ç—ã –∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ —Å—Ç—Ä–æ–∫
SCHEDULE_SHEETS = {
    "29.10 / –°–ù–∏–ú–ö + –ú–≠–û": {
        "date": "2025-10-29",
        "groups": [
            {
                "faculties": ["–°–ù–∏–ú–ö", "–ú–≠–û"],  # –í–º–µ—Å—Ç–µ –≤ –æ–¥–Ω–æ–º –∫–æ—Ä–ø—É—Å–µ
                "row_start": 3,  # B3
                "row_end": 13    # S13 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
            }
        ]
    },
    "30.10 / –§–≠–ë + –Æ–§": {
        "date": "2025-10-30",
        "groups": [
            {
                "faculties": ["–§–≠–ë"],
                "row_start": 3,  # B3
                "row_end": 6     # S6
            },
            {
                "faculties": ["–Æ—Ä—Ñ–∞–∫"],
                "row_start": 12,  # B12
                "row_end": 17     # S17
            }
        ]
    },
    "31.10 / –§–§ + –ò–¢–∏–ê–ë–î": {
        "date": "2025-10-31",
        "groups": [
            {
                "faculties": ["–ò–¢–∏–ê–ë–î"],
                "row_start": 3,   # B3
                "row_end": 8      # S8
            },
            {
                "faculties": ["–§–∏–Ω–§–∞–∫"],
                "row_start": 15,  # B15
                "row_end": 20     # S20
            }
        ]
    },
    "06.11 / –ù–ê–ë + –í–®–£": {
        "date": "2025-11-06",
        "groups": [
            {
                "faculties": ["–ù–ê–ë", "–í–®–£"],  # –í–º–µ—Å—Ç–µ –≤ –æ–¥–Ω–æ–º –∫–æ—Ä–ø—É—Å–µ
                "row_start": 3,  # B3
                "row_end": 13    # S13
            }
        ]
    }
}

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã (—Å—Ç–æ–ª–±—Ü—ã B-S)
# –ò–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ (—Å 0): –≤—Ä–µ–º—è
TIME_SLOTS = {
    1: "09:00",   # B
    2: "09:45",   # C
    3: "10:30",   # D
    4: "11:15",   # E
    5: "12:00",   # F
    6: "12:45",   # G
    7: "13:30",   # H - –û–ë–ï–î, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º!
    8: "14:15",   # I
    9: "15:00",   # J
    10: "15:45",  # K
    11: "16:30",  # L
    12: "17:15",  # M
    13: "18:00",  # N
    14: "18:45",  # O
    15: "19:15",  # P
    16: "20:00",  # Q
    17: "20:45",  # R
    18: "21:30"   # S
}

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
SLOT_DURATION = 45


def get_time_end(time_start: str) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ª–æ—Ç–∞."""
    hours, minutes = map(int, time_start.split(':'))
    total_minutes = hours * 60 + minutes + SLOT_DURATION
    end_hours = total_minutes // 60
    end_minutes = total_minutes % 60
    return f"{end_hours:02d}:{end_minutes:02d}"


def get_schedules_data() -> tuple[List[Dict[str, any]], Dict[str, int]]:
    """
    –ß–∏—Ç–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –∏–∑ Google Sheets —Å —É—á—ë—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞.
    
    Returns:
        tuple: (—Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–º)
        - List[Dict]: –°–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤
        - Dict[str, int]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {interviewer_name: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–ª–æ—Ç–æ–≤}
    """
    all_slots = []
    interviewer_stats = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–º
    
    try:
        client = get_google_sheets_client()
        sheet = client.open_by_key(SCHEDULE_SHEET_ID)
        
        print("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ Google Sheets...")
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º
        for sheet_name, info in SCHEDULE_SHEETS.items():
            date = info['date']
            groups = info['groups']
            
            try:
                print(f"\nüìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–∏—Å—Ç: {sheet_name}")
                worksheet = sheet.worksheet(sheet_name)
                time.sleep(1)  # –ó–∞—â–∏—Ç–∞ –æ—Ç rate limit Google API
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ª–∏—Å—Ç–∞
                all_values = worksheet.get_all_values()
                
                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≥—Ä—É–ø–ø–∞–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ–º –ª–∏—Å—Ç–µ
                for group in groups:
                    faculties = group['faculties']
                    row_start = group['row_start'] - 1  # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0
                    row_end = group['row_end']
                    
                    faculties_str = ', '.join(faculties)
                    print(f"  üìå –§–∞–∫—É–ª—å—Ç–µ—Ç—ã: {faculties_str} (—Å—Ç—Ä–æ–∫–∏ {group['row_start']}-{group['row_end']})")
                    
                    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                    for row_idx in range(row_start, min(row_end, len(all_values))):
                        row = all_values[row_idx]
                        
                        if len(row) < 23:  # –ú–∏–Ω–∏–º—É–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å A + B-S + W (23 –∫–æ–ª–æ–Ω–∫–∏)
                            continue
                        
                        interviewer_name = row[0].strip()  # –ö–æ–ª–æ–Ω–∫–∞ A
                        if not interviewer_name:  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            continue
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        if interviewer_name.lower() in ['–∏–º—è', '—Ñ–∏–æ', '—Å–æ–±–µ—Å–µ–¥—É—é—â–∏–π', '–≤—Ä–µ–º—è']:
                            continue
                        
                        interviewer_sheet_id = row[22].strip() if len(row) > 22 else ''  # –ö–æ–ª–æ–Ω–∫–∞ W (–∏–Ω–¥–µ–∫—Å 22)
                        if not interviewer_sheet_id:  # –ù–µ—Ç ID - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            print(f"    ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω '{interviewer_name}': –Ω–µ—Ç ID –≤ –∫–æ–ª–æ–Ω–∫–µ W")
                            continue
                        
                        # –°—á—ë—Ç—á–∏–∫ —Å–ª–æ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ
                        slots_count = 0
                        
                        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–æ—Ç–∞–º (B-S, –∏–Ω–¥–µ–∫—Å—ã 1-18)
                        for col_idx, time_start in TIME_SLOTS.items():
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–µ–¥ (13:30)
                            if time_start == "13:30":
                                continue
                            
                            if col_idx >= len(row):
                                continue
                            
                            cell_value = str(row[col_idx]).strip()
                            
                            # –ï—Å–ª–∏ –≤ —è—á–µ–π–∫–µ "1" - —Å–ª–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                            if cell_value == "1":
                                time_end = get_time_end(time_start)
                                
                                all_slots.append({
                                    'interviewer_sheet_id': interviewer_sheet_id,
                                    'interviewer_name': interviewer_name,
                                    'date': date,
                                    'time_start': time_start,
                                    'time_end': time_end,
                                    'faculties': faculties  # –°–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                                })
                                
                                slots_count += 1
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        if slots_count > 0:
                            key = f"{interviewer_name} ({interviewer_sheet_id})"
                            interviewer_stats[key] = interviewer_stats.get(key, 0) + slots_count
                            print(f"    ‚úÖ {interviewer_name}: {slots_count} —Å–ª–æ—Ç–æ–≤")
                
                time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–∏—Å—Ç–∞–º–∏
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞ '{sheet_name}': {e}")
                continue
        
        print(f"\nüìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {len(all_slots)}")
        print(f"üë• –°–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö —Å —Å–ª–æ—Ç–∞–º–∏: {len(interviewer_stats)}")
        
        return all_slots, interviewer_stats
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return [], {}

